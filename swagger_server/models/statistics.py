# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.result import Result  # noqa: F401,E501
from swagger_server import util


class Statistics(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, result: Result=None, slope: float=None, intercept: float=None, p: float=None, r: float=None, rsq: float=None, err: float=None):  # noqa: E501
        """Statistics - a model defined in Swagger

        :param result: The result of this Statistics.  # noqa: E501
        :type result: Result
        :param slope: The slope of this Statistics.  # noqa: E501
        :type slope: float
        :param intercept: The intercept of this Statistics.  # noqa: E501
        :type intercept: float
        :param p: The p of this Statistics.  # noqa: E501
        :type p: float
        :param r: The r of this Statistics.  # noqa: E501
        :type r: float
        :param rsq: The rsq of this Statistics.  # noqa: E501
        :type rsq: float
        :param err: The err of this Statistics.  # noqa: E501
        :type err: float
        """
        self.swagger_types = {
            'result': Result,
            'slope': float,
            'intercept': float,
            'p': float,
            'r': float,
            'rsq': float,
            'err': float
        }

        self.attribute_map = {
            'result': 'result',
            'slope': 'slope',
            'intercept': 'intercept',
            'p': 'p',
            'r': 'r',
            'rsq': 'rsq',
            'err': 'err'
        }

        self._result = result
        self._slope = slope
        self._intercept = intercept
        self._p = p
        self._r = r
        self._rsq = rsq
        self._err = err

    @classmethod
    def from_dict(cls, dikt) -> 'Statistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Statistics of this Statistics.  # noqa: E501
        :rtype: Statistics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result(self) -> Result:
        """Gets the result of this Statistics.


        :return: The result of this Statistics.
        :rtype: Result
        """
        return self._result

    @result.setter
    def result(self, result: Result):
        """Sets the result of this Statistics.


        :param result: The result of this Statistics.
        :type result: Result
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def slope(self) -> float:
        """Gets the slope of this Statistics.

        The slope (m) of the linear regression y = mx + c.  # noqa: E501

        :return: The slope of this Statistics.
        :rtype: float
        """
        return self._slope

    @slope.setter
    def slope(self, slope: float):
        """Sets the slope of this Statistics.

        The slope (m) of the linear regression y = mx + c.  # noqa: E501

        :param slope: The slope of this Statistics.
        :type slope: float
        """
        if slope is None:
            raise ValueError("Invalid value for `slope`, must not be `None`")  # noqa: E501

        self._slope = slope

    @property
    def intercept(self) -> float:
        """Gets the intercept of this Statistics.

        The intercept (c) of the linear regression y = mx + c.  # noqa: E501

        :return: The intercept of this Statistics.
        :rtype: float
        """
        return self._intercept

    @intercept.setter
    def intercept(self, intercept: float):
        """Sets the intercept of this Statistics.

        The intercept (c) of the linear regression y = mx + c.  # noqa: E501

        :param intercept: The intercept of this Statistics.
        :type intercept: float
        """
        if intercept is None:
            raise ValueError("Invalid value for `intercept`, must not be `None`")  # noqa: E501

        self._intercept = intercept

    @property
    def p(self) -> float:
        """Gets the p of this Statistics.

        The ??? of the linear regression.  # noqa: E501

        :return: The p of this Statistics.
        :rtype: float
        """
        return self._p

    @p.setter
    def p(self, p: float):
        """Sets the p of this Statistics.

        The ??? of the linear regression.  # noqa: E501

        :param p: The p of this Statistics.
        :type p: float
        """
        if p is None:
            raise ValueError("Invalid value for `p`, must not be `None`")  # noqa: E501

        self._p = p

    @property
    def r(self) -> float:
        """Gets the r of this Statistics.

        The ??? of the linear regression.  # noqa: E501

        :return: The r of this Statistics.
        :rtype: float
        """
        return self._r

    @r.setter
    def r(self, r: float):
        """Sets the r of this Statistics.

        The ??? of the linear regression.  # noqa: E501

        :param r: The r of this Statistics.
        :type r: float
        """
        if r is None:
            raise ValueError("Invalid value for `r`, must not be `None`")  # noqa: E501

        self._r = r

    @property
    def rsq(self) -> float:
        """Gets the rsq of this Statistics.

        The ??? of the linear regression.  # noqa: E501

        :return: The rsq of this Statistics.
        :rtype: float
        """
        return self._rsq

    @rsq.setter
    def rsq(self, rsq: float):
        """Sets the rsq of this Statistics.

        The ??? of the linear regression.  # noqa: E501

        :param rsq: The rsq of this Statistics.
        :type rsq: float
        """
        if rsq is None:
            raise ValueError("Invalid value for `rsq`, must not be `None`")  # noqa: E501

        self._rsq = rsq

    @property
    def err(self) -> float:
        """Gets the err of this Statistics.

        The probability of error in the linear regression.  # noqa: E501

        :return: The err of this Statistics.
        :rtype: float
        """
        return self._err

    @err.setter
    def err(self, err: float):
        """Sets the err of this Statistics.

        The probability of error in the linear regression.  # noqa: E501

        :param err: The err of this Statistics.
        :type err: float
        """
        if err is None:
            raise ValueError("Invalid value for `err`, must not be `None`")  # noqa: E501

        self._err = err
